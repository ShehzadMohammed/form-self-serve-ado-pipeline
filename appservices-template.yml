resources:
  repositories:
    - repository: tf_templates
      type: git
      name: <ProjectName>/<TemplatesRepo>
      ref: refs/heads/main

parameters:
  - name: environment
    type: string
    default: dev
    values: [dev, qa, prod]

  - name: app
    type: string
    default: webapp01

  - name: subpath
    type: string
    default: terraform-template/appservices

  - name: app_service_plan_name
    type: string
    default: 'demo-plan-${{ parameters.environment }}'

  - name: app_service_plan_resource_group
    type: string
    default: 'demo-rg'

  - name: virtual_network_name
    type: string
    default: '${{ parameters.environment }}-vnet'

  - name: virtual_networks_resource_group_name
    type: string
    default: '${{ parameters.environment }}-network-rg'

  - name: subnet_name
    type: string
    default: 'app-subnet'

  - name: docker_image_name
    type: string
    default: 'myapp:latest'

  - name: docker_registry_url
    type: string
    default: 'myacr.azurecr.io'

  - name: service_connection_name
    type: string
    default: <Your-Service-Connection>

  - name: backend_service_connection_name
    type: string
    default: <Your-Backend-Service-Connection>

  - name: backend_rg
    type: string
    default: tfstate-rg

  - name: backend_storage
    type: string
    default: tfstateprod

  - name: backend_container
    type: string
    default: tfstate

  - name: backend_key_prefix
    type: string
    default: statefiles

variables:
  infraenv: ${{ if eq(parameters.environment, 'prod') }}${{ 'prod' }}${{ else }}${{ 'nonprod' }}
  workingdir: 'terraform'
  commandOptions: >
    -var="app=${{ parameters.app }}"
    -var="env=${{ parameters.environment }}"
    -var="infraenv=$(infraenv)"
    -var="app_service_plan_name=${{ parameters.app_service_plan_name }}"
    -var="app_service_plan_resource_group=${{ parameters.app_service_plan_resource_group }}"
    -var="virtual_network_name=${{ parameters.virtual_network_name }}"
    -var="virtual_networks_resource_group_name=${{ parameters.virtual_networks_resource_group_name }}"
    -var="subnet_name=${{ parameters.subnet_name }}"
    -var="docker_image_name=${{ parameters.docker_image_name }}"
    -var="docker_registry_url=${{ parameters.docker_registry_url }}"
  backendAzureRmKey: '${{ parameters.backend_key_prefix }}/${{ parameters.app }}-${{ parameters.environment }}.tfstate'

stages:
- stage: TerraformDeploy
  displayName: Deploy with Terraform
  jobs:
  - job: RunTerraform
    pool:
      vmImage: 'windows-latest'
    steps:
      - checkout: self
        path: s/self
        persistCredentials: true

      - checkout: tf_templates
        path: s/templates
        persistCredentials: true

      - script: |
          xcopy /E /I /Y "$(Pipeline.Workspace)\s\templates\${{ parameters.subpath }}" "$(Pipeline.Workspace)\s\self\$(workingdir)"
          echo ##vso[task.setvariable variable=System.DefaultWorkingDirectory]$(Pipeline.Workspace)/s/self
        displayName: "Copy Terraform Code"

      - template: terraform-template.yml@tf_templates
        parameters:
          environment: ${{ parameters.environment }}
          env: ${{ parameters.environment }}
          infraenv: $(infraenv)
          app: ${{ parameters.app }}
          service_connection_name: ${{ parameters.service_connection_name }}
          backend_service_connection_name: ${{ parameters.backend_service_connection_name }}
          workingdir: $(workingdir)
          commandOptions: $(commandOptions)
          backendServiceArm: ${{ parameters.backend_service_connection_name }}
          backendType: azurerm
          backendAzureRmResourceGroupName: ${{ parameters.backend_rg }}
          backendAzureRmStorageAccountName: ${{ parameters.backend_storage }}
          backendAzureRmContainerName: ${{ parameters.backend_container }}
          backendAzureRmKey: $(backendAzureRmKey)
          app_service_plan_name: ${{ parameters.app_service_plan_name }}
          app_service_plan_resource_group: ${{ parameters.app_service_plan_resource_group }}
          virtual_network_name: ${{ parameters.virtual_network_name }}
          virtual_networks_resource_group_name: ${{ parameters.virtual_networks_resource_group_name }}
          subnet_name: ${{ parameters.subnet_name }}
          docker_image_name: ${{ parameters.docker_image_name }}
          docker_registry_url: ${{ parameters.docker_registry_url }}
          tags: '{}'